name: Deploy Akamai EdgeWorker

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      # Add steps to update version based on commit ID
      - name: Set EdgeWorker version from commit ID
        run: |
          # Get short commit SHA (first 7 characters)
          COMMIT_ID=$(git rev-parse --short HEAD)
          
          # Read the existing ew.json
          cat ew.json | jq --arg version "$COMMIT_ID" '.edgeworker.version = $version' > ew_updated.json
          
          # Replace the original file
          mv ew_updated.json ew.json
          
          # Display the updated version
          echo "EdgeWorker version set to commit ID: $COMMIT_ID"
          cat ew.json

      - name: Update bundle.json version
        run: |
          # Get short commit SHA
          COMMIT_ID=$(git rev-parse --short HEAD)
          
          # Update bundle.json
          cat bundle.json | jq --arg version "$COMMIT_ID" '.["edgeworker-version"] = $version' > bundle_updated.json
          mv bundle_updated.json bundle.json
          
          echo "Updated bundle.json version to: $COMMIT_ID"
          cat bundle.json

      - name: Install Akamai CLI and EdgeWorkers CLI
        run: |
          # Set up GOPATH
          export GOPATH=$HOME/go
          mkdir -p $GOPATH
    
          # Download the binary
          git clone https://github.com/akamai/cli.git $GOPATH/src/github.com/akamai/cli
          cd $GOPATH/src/github.com/akamai/cli
          go build -o akamai cli/main.go
          chmod +x akamai
          sudo mv akamai /usr/local/bin/
          export PATH=$PATH:/usr/local/bin/
    
          # Verify installation
          akamai --version
    
          # Install EdgeWorkers package
          akamai install edgeworkers  
          
      - name: Configure Akamai credentials
        run: |
          touch ~/.edgerc
          cat > ~/.edgerc << EOF
          [default]
          host = ${{ secrets.AKAMAI_HOST }}
          client_token = ${{ secrets.AKAMAI_CLIENT_TOKEN }}
          client_secret = ${{ secrets.AKAMAI_CLIENT_SECRET }}
          access_token = ${{ secrets.AKAMAI_ACCESS_TOKEN }}
          EOF
          
      - name: Create tarball package
        run: |
          EDGEWORKER_ID=$(jq -r '.edgeworker.id' ew.json)
          VERSION=$(jq -r '.edgeworker.version' ew.json)
          tar -czvf "${EDGEWORKER_ID}_${VERSION}.tgz" main.js bundle.json
          ls -la "${EDGEWORKER_ID}_${VERSION}.tgz"
          
      - name: Upload EdgeWorker
        run: |
          EDGEWORKER_ID=$(jq -r '.edgeworker.id' ew.json)
          VERSION=$(jq -r '.edgeworker.version' ew.json)
          TARBALL="${EDGEWORKER_ID}_${VERSION}.tgz"
          akamai edgeworkers upload --bundle $TARBALL $EDGEWORKER_ID --accountkey ${{ secrets.ASK }}
          
      - name: Activate EdgeWorker on staging
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          EDGEWORKER_ID=$(jq -r '.edgeworker.id' ew.json)
          VERSION=$(jq -r '.edgeworker.version' ew.json)
          echo "EW ID - "
          echo $EDGEWORKER_ID
          akamai edgeworkers activate $EDGEWORKER_ID STAGING $VERSION --accountkey ${{ secrets.ASK }}

      - name: Wait for staging activation to complete
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          EDGEWORKER_ID=$(jq -r '.edgeworker.id' ew.json)
          VERSION=$(jq -r '.edgeworker.version' ew.json)
    
          echo "Waiting for EdgeWorker $EDGEWORKER_ID version $VERSION to complete activation on staging..."
          
          # Set maximum attempts to avoid infinite loop
          MAX_ATTEMPTS=20
          ATTEMPTS=0
          
          # Loop until activation is complete (status is COMPLETE)
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            akamai edgeworkers list-activations $EDGEWORKER_ID --json activation_status.json --accountkey ${{ secrets.ASK }}

            STATUS=$(jq -r '.data[] | select(.version == "'$VERSION'" and .network == "STAGING") | .status' activation_status.json)

            echo "Current activation status for version $VERSION on STAGING: $STATUS"

            if [ "$STATUS" == "COMPLETE" ]; then
               echo "EdgeWorker activation on staging is complete!"
               break
            fi

            # Increment attempt counter
            ATTEMPTS=$((ATTEMPTS+1))
            if [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; then
               echo "Timed out waiting for activation to complete. Please check manually."
               exit 1
            fi

            echo "Activation still in progress. Waiting 30 seconds... (Attempt $ATTEMPTS of $MAX_ATTEMPTS)"
            sleep 30
          done     

      - name: Activate EdgeWorker on production
        # Manual activation
        #if: github.event_name == 'workflow_dispatch'
        # Automatic activation
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          EDGEWORKER_ID=$(jq -r '.edgeworker.id' ew.json)
          VERSION=$(jq -r '.edgeworker.version' ew.json)
          akamai edgeworkers activate $EDGEWORKER_ID PRODUCTION $VERSION --accountkey ${{ secrets.ASK }}